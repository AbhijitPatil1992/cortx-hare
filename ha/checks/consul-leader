#!/usr/bin/env bash
set -eu -o pipefail
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '
#set -x

export PATH="$PATH:/opt/seagate/eos/hare/bin"
PROG=${0##*/}
DEFAULT_TIMEOUT=5

# move this to some library if you are copying this 3rd time
log() {
    logger -s -t "$PROG" "$@"
}

die() {
    log "$@"
    exit 1
}

usage() {
    cat <<EOF
Usage: $PROG [timeout]
       $PROG [-h | --help]

Check that cluster leader can be requrested via consul command.
Uses timeout to wait before termination in case internal command freezes for
some reason. Returns error if timeout was triggered.
The script expects that consul writes errors to stderr and data to
stdout.

Positional arguments:
  timeout   Natural number of seconds to wait before kill leader request.
            Default value: 5 sec

Options:
  -h, --help   Show this help and exit.
EOF
}

case ${1:-none} in
    -h|--help) usage; exit;;
    0) die "Zero timeout is not allowed" ;;
esac

timeout_sec=${1:-$DEFAULT_TIMEOUT}
hare_log_file="$(mktemp)"
raft_log_file="$(mktemp)"

exec 5>&2
exec 2> >(logger -s -t $PROG >&2)
timeout --signal SIGKILL $timeout_sec consul kv get leader > $hare_log_file  &
timeout --signal SIGKILL $timeout_sec curl --silent --max-time $timeout_sec http://127.0.0.1:8500/v1/status/leader > $raft_log_file &
exec 2>&5

wait

hare_result=
raft_result=
[[ -f $hare_log_file ]] && hare_result=$(<$hare_log_file)
[[ -f $raft_log_file ]] && raft_result=$(<$raft_log_file)
rm $hare_log_file $raft_log_file 2>/dev/null

[[ -n $hare_result ]] || log "No HA elected leader reported by consul"
[[ -n $raft_result ]] || log "No Raft leader reported by consul"

[[ -n $hare_result && -n $raft_result ]]
