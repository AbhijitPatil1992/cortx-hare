# Globals ----------------------------------------------------------------- {{{1
#

variables:
  GIT_DEPTH: 1  # clone only the current commit
  GIT_STRATEGY: clone  # make a fresh `git clone` of the repo for every new CI job
  GIT_SUBMODULE_STRATEGY: normal  # init and check out submodules
  CENTOS_RELEASE: eos
  DOCKER_REGISTRY: registry.gitlab.mero.colo.seagate.com
  M0_VG_NO_SYMLINKS: "true"
  RPMSYNC_DIR:    "/releases/dev/$CI_PROJECT_PATH/$CI_COMMIT_REF_SLUG/B$CI_PIPELINE_ID"
  WORKSPACE_NAME: "${CI_PROJECT_NAME}${CI_PIPELINE_ID}"
  WORKSPACE_DIR:  "/home/gitlab-runner/workspaces/${CI_PROJECT_NAME}${CI_PIPELINE_ID}"

stages:
  - build
  - test
  - cleanup

before_script:
  - date -u -Isec
  - git log -1 --pretty=fuller
  - printenv

after_script:
  - date -u -Isec

# Build ------------------------------------------------------------------- {{{1
#

build:
  stage: build
  tags: [ m0vg ]
  except: [ tags ]
  script: [ ci/build ]

rpmbuild:
  stage: build
  tags: [ docker-build ]
  except: [ tags ]
  image: $DOCKER_REGISTRY/mero/hare:$CENTOS_RELEASE
  script: [ ci/rpmbuild ]

# Test ----------------------------------------------------------------- {{{1
#

test-boot1:
  stage: test
  tags: [ m0vg ]
  except: [ tags ]
  variables: { M0VG: m0vg-1node/scripts/m0vg }
  script: [ ci/test-boot1 ]

  after_script:
    - date -u -Isec
    - cd $WORKSPACE_DIR

    # Collect syslog.
    - $M0VG run sudo journalctl --no-pager --full --utc --boot
                                --output short-precise
                                > $CI_PROJECT_DIR/${CI_JOB_NAME}_syslog.log

    # Collect Consul logs.
    - |
      $M0VG scp cmu:/tmp/consul\*.log $CI_PROJECT_DIR/
      ( cd $CI_PROJECT_DIR/
        for f in consul*.log; do mv -v {,${CI_JOB_NAME}_}$f; done )

    # Collect m0reportbug archives.
    - |
      $M0VG run sudo /data/mero/utils/m0reportbug
      $M0VG scp cmu:m0reportbug-\*.tar.xz $CI_PROJECT_DIR/
      ( cd $CI_PROJECT_DIR/
        for f in m0reportbug-*.tar.xz; do mv -v {,${CI_JOB_NAME}_}$f; done )

    # Clean up.  This ensures that VMs are destroyed in case of a manual
    # job restart, when global 'cleanup' stage is not performed.
    - $M0VG destroy -f || true

  artifacts:
    name: "$CI_PROJECT_NAME job $CI_JOB_ID ($CI_JOB_NAME) logs"
    when: always  # whenever the job has failed or succeeded
    paths:
      - ${CI_JOB_NAME}_syslog.log
      - ${CI_JOB_NAME}_m0reportbug-data.tar.xz
      # - ${CI_JOB_NAME}_m0reportbug-cores.tar.xz  # XXX core files are big
      - ${CI_JOB_NAME}_m0reportbug-traces.tar.xz
      - ${CI_JOB_NAME}_consul*.log


test-boot2:
  stage: test
  tags: [ m0vg ]
  except: [ tags ]
  variables: { M0VG: m0vg-2nodes/scripts/m0vg }
  script: [ ci/test-boot2 ]

  after_script:
    - date -u -Isec
    - cd $WORKSPACE_DIR

    # Collect syslogs.
    - |
      for host in ssu1 ssu2; do
          $M0VG run --vm $host sudo journalctl \
              --no-pager --full --utc --boot --output short-precise \
              > $CI_PROJECT_DIR/${CI_JOB_NAME}_${host}_syslog.log
      done

    # Collect Consul logs.
    - |
      for host in ssu1 ssu2; do
          $M0VG scp $host:/tmp/consul\*.log $CI_PROJECT_DIR/
          ( cd $CI_PROJECT_DIR/
            for f in consul*.log; do mv -v {,${CI_JOB_NAME}_${host}_}$f; done )
      done

    # Collect m0reportbug archives.
    - |
      for host in ssu1 ssu2; do
          $M0VG run --vm $host sudo /data/mero/utils/m0reportbug
          $M0VG scp $host:m0reportbug-\*.tar.xz $CI_PROJECT_DIR/
          ( cd $CI_PROJECT_DIR/
            for f in m0reportbug-*.tar.xz; do
                mv -v {,${CI_JOB_NAME}_${host}_}$f
            done )
      done

    # Clean up.  This ensures that VMs are destroyed in case of a manual
    # job restart, when global 'cleanup' stage is not performed.
    - $M0VG destroy -f || true

  artifacts:
    name: "$CI_PROJECT_NAME job $CI_JOB_ID ($CI_JOB_NAME) logs"
    when: always  # whenever the job has failed or succeeded
    paths:
      - ${CI_JOB_NAME}_*_syslog.log
      - ${CI_JOB_NAME}_*_m0reportbug-data.tar.xz
      # - ${CI_JOB_NAME}_*_m0reportbug-cores.tar.xz  # XXX core files are big
      - ${CI_JOB_NAME}_*_m0reportbug-traces.tar.xz
      - ${CI_JOB_NAME}_*_consul*.log


# Cleanup ----------------------------------------------------------------- {{{1
#

cleanup:
  stage: cleanup
  tags: [ m0vg ]
  except: [ tags ]
  when: always
  dependencies: []  # empty deps list prevents unneeded artifacts downloading

  variables:
    # If a branch is updated while CI tests for the older commit are still
    # being run, the checkout phase of 'cleanup' job will fail (thus cleanup
    # script will not run) unless GIT_DEPTH is deep enough to include the older
    # commit. Cloning 30 latest commits seems to be good enough - it's quite
    # rare for people to push more than 30 new commits in one go.
    GIT_DEPTH: 30

  script:
    - cd $WORKSPACE_DIR
    - m0vg-1node/scripts/m0vg destroy -f || true
    - m0vg-2nodes/scripts/m0vg destroy -f || true

# vim: foldmethod=marker shiftwidth=2 tabstop=2 expandtab
