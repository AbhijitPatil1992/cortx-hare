{-*- dhall -*-}

let List/map = https://prelude.dhall-lang.org/List/map
let Text/concatSep = https://prelude.dhall-lang.org/Text/concatSep

let Oid       = ../Conf/Oid/Oid
let SvcT      = ../Conf/SvcT/SvcT
let SvcT/show = ../Conf/SvcT/show

let ConsulService =
  { node : Oid
  , process : Oid
  , service : SvcT
  }

let Value = < vText : Text | vNatural : Natural >

let KVEntry = { key : Text, value : Value }

let ConsulService/toKVEntry : ConsulService -> KVEntry
  = \(x : ConsulService)
 ->
  { value = Value.vText ""
  , key = Text/concatSep "/"
      [ "node"
      , Natural/show x.node.key
      , "service"
      , SvcT/show x.service
      , Natural/show x.process.key
      ]
  }

in
    \(arg : { services : List ConsulService, fid_keygen : Natural })
 ->
    [ { key = "leader", value = Value.vText "" }
    , { key = "epoch", value = Value.vNatural 1 }
    , { key = "fid_keygen", value = Value.vNatural arg.fid_keygen }
    ]
    # List/map ConsulService KVEntry ConsulService/toKVEntry arg.services
    : List KVEntry
