#!/usr/bin/env python3

# :help: show cluster status

import os
import sys
from socket import gethostname
from typing import Dict, List, NamedTuple, Set

from consul import Consul, ConsulException

Process = NamedTuple('Process', [('name', str), ('fidk', int), ('ep', str)])


def processfid2str(fidk: int) -> str:
    return '{:#x}:{:#x}'.format(ord('r') << 56 | 1, fidk)


def get_kv(cns: Consul, key: str) -> str:
    kv: Dict[str, bytes] = cns.kv.get(key)[1]
    return kv['Value'].decode() if kv and kv['Value'] is not None else ''


def leader_tag(cns: Consul, host: str) -> str:
    return ' (RC)' if get_kv(cns, 'leader') == host else ''


def profile(cns: Consul) -> str:
    return get_kv(cns, 'm0conf/profiles')


def sns_pools(cns: Consul) -> List[str]:
    return get_kv(cns, 'm0conf/profiles/pools').split(' ')


def hosts(cns: Consul) -> Set[str]:
    data = cns.kv.get('m0conf/nodes', recurse=True)[1]
    host_names = {(x['Key'].split('/'))[2] for x in data}
    return host_names


def proc_id2name(cns: Consul, node: str, proc_id: int) -> str:
    names = {
        'confd': 'confd',
        'ha': 'hax',
        'ios': 'ioservice',
        'm0_client_s3': 's3server'
    }
    services = cns.kv.get(f'm0conf/nodes/{node}/processes/{proc_id}/services',
                          recurse=True)[1]
    assert services
    for svc in services:
        # key looks like
        # 'm0conf/nodes/{node}/processes/{proc_id}/services/<svc_name>'
        svc_name = svc['Key'].split('/')[-1]
        if svc_name in names:
            return names[svc_name]
    return 'm0_client'


def processes(cns: Consul, host: str) -> List:
    data = cns.kv.get(f'm0conf/nodes/{host}/processes', recurse=True)[1]
    fidk_list = list({(x['Key'].split('/'))[4] for x in data})
    fidk_list.sort(key=int, reverse=False)

    return [
        Process(name=proc_id2name(cns, host, x),
                fidk=int(x),
                ep=get_kv(cns, f'm0conf/nodes/{host}/processes/{x}/endpoint'))
        for x in fidk_list
    ]


def is_localhost(hostname: str) -> bool:
    name = gethostname()
    return hostname in ('localhost', '127.0.0.1', name, f'{name}.local')


def process_status(cns: Consul, host: str, proc: Process) -> str:
    svcs_status = cns.health.node(host)
    for svc in svcs_status[1]:
        if svc['ServiceID'] != '' and proc.fidk == int(svc['ServiceID']):
            return 'started' if svc['Status'] == 'passing' else 'offline'
    return 'unknown'


def consul_status(host: str) -> str:
    cmd = '{}sudo systemctl is-active --quiet hare-consul-agent*'.format(
        '' if is_localhost(host) else f'ssh {host} ')
    return 'passing' if os.system(cmd) == 0 else 'offline'


def main():
    if consul_status(gethostname()) != 'passing':
        print('Cluster is not running.', file=sys.stderr)
        return -1
    cns = Consul()
    print('Profile: ' + profile(cns))
    print('Data Pools:')
    for x in sns_pools(cns):
        print(f'    {x}')
    print('Services:')
    for h in hosts(cns):
        print(f'    {h} {leader_tag(cns, h)}')
        for p in processes(cns, h):
            print(f'    [{process_status(cns, h, p):<10}] {p.name:<20}\
 {processfid2str(p.fidk):<30} {p.ep:<30}')


if __name__ == '__main__':
    try:
        main()
    except ConsulException as err:
        print("Consul Error: %s" % err)
