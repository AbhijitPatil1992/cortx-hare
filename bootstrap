#!/usr/bin/env bash
set -eu -o pipefail
# set -x
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '

# Helper script to bootstrap the cluster.

SRC_DIR="$(dirname $(readlink -f $0))"
M0_SRC_DIR=${M0_SRC_DIR:-${SRC_DIR%/*}/mero}

usage() {
    echo "Usage: ${0##*/} /path/to/cluster-description-file.yaml"
}

(($# == 1)) || {
    usage >&2
    exit 1
}

cluster_descr=$1

say() {
    echo -n "$(date '+%F %T'): $*"
}

say 'Generating cluster configuration... '
cfgen_out=/tmp

cd $SRC_DIR
cfgen/cfgen -D cfgen/dhall/ -o $cfgen_out < $cluster_descr

sudo mkdir -p /etc/mero
dhall text < $cfgen_out/confd.dhall |
    $M0_SRC_DIR/utils/m0confgen > $cfgen_out/confd.xc

get_server_nodes() {
    jq -r '.servers[] | "\(.hostname) \(.ipaddr)"' $cfgen_out/consul-agents.json
}

get_client_nodes() {
    jq -r '.clients[] | "\(.hostname) \(.ipaddr)"' $cfgen_out/consul-agents.json
}

# Get my IP address (the one that the other agents will join to).
read _ join_ip <<< $(get_server_nodes | grep -w $HOSTNAME)

[[ $join_ip ]] || {
    echo 'Bootstrap should be run from the server node only' >&2
    exit 1
}
echo 'Ok.'

say 'Starting our Consul server agent... '
# $join_ip is our bind_ip address
$SRC_DIR/update-consul-env --mode server --bind $join_ip \
                           --extra-options '-ui -bootstrap-expect 1'
sudo systemctl start consul-agent

# Give Consul some time for its internal bootstrap and leader
# election. (Until then the KV Store won't be accessible.)
sleep 3
echo 'Ok.'

say 'Importing configuration into the KV Store... '
jq '[.[] | {key, value: (.value | @base64)}]' < $cfgen_out/consul-kv.json |
    consul kv import - > /dev/null
echo 'Ok.'

say 'Starting other Consul server agents... '
while read node bind_ip; do
    ssh $node "$SRC_DIR/update-consul-env --mode server --bind $bind_ip \
                                          --join $join_ip &&
               sudo systemctl start consul-agent"
done < <(get_server_nodes | grep -vw $HOSTNAME || true)
echo 'Ok.'

say 'Starting Consul client agents... '
while read node bind_ip; do
    ssh $node "$SRC_DIR/update-consul-env --mode client --bind $bind_ip \
                                          --join $join_ip &&
                   sudo systemctl start consul-agent"
done < <(get_client_nodes)
echo 'Ok.'

say 'Waiting for the RC Leader to be elected...'
get_session() {
    consul kv get -detailed leader | awk '/Session/ {print $2}'
}
count=1
while [[ $(get_session) == '-' ]]; do
    if (($count > 5)); then
        consul kv put leader elect$RANDOM > /dev/null
        count=1
    fi
    sleep 1
    echo -n '.'
    ((count++))
done
echo ' Ok.'

# Start Mero in two phases: 1st confd-s, then ios-es.
say 'Starting Mero (phase1)... '
$SRC_DIR/bootstrap-node phase1 &
pids=($!)

while read node _; do
    scp -q $cfgen_out/confd.xc $node:/tmp/
    ssh $node $SRC_DIR/bootstrap-node phase1 &
    pids+=($!)
done < <(get_server_nodes | grep -vw $HOSTNAME || true)

# Check the status explicitly from each node.
for pid in ${pids[@]}; do
    wait $pid
done
echo 'Ok.'

# Now the 2nd phase (ios-es).
say 'Starting Mero (phase2)... '
$SRC_DIR/bootstrap-node phase2 &
pids=($!)

while read node _; do
    ssh $node $SRC_DIR/bootstrap-node phase2 &
    pids+=($!)
done < <(get_server_nodes | grep -vw $HOSTNAME || true)

while read node _; do
    ssh $node $SRC_DIR/bootstrap-node phase2 &
    pids+=($!)
done < <(get_client_nodes)

# Check the status explicitly from each node.
for pid in ${pids[@]}; do
    wait $pid
done
echo 'Ok.'

say 'Checking the health of the services... '
sleep 5 # Give Consul some time to pick up the statuses
for svc in confd ios; do
    curl -s http://127.0.0.1:8500/v1/health/service/$svc |
        jq -r '.[] | "\(.Node.Node) \([.Checks[].Status]|unique)"' |
        fgrep -v '["passing"]' && {
            echo "Check '$svc' service on the node(s) listed above."
            exit 1
        } || true
done
echo 'Ok.'
