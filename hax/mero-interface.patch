diff --git a/ha/ha.c b/ha/ha.c
index 7ccf29612..4da418286 100644
--- a/ha/ha.c
+++ b/ha/ha.c
@@ -256,6 +256,7 @@ ha_request_received_cb(struct m0_ha_entrypoint_server    *hes,
 {
 	struct m0_ha *ha;
 
+	M0_LOG(M0_ALWAYS, "ha_request_received_cb");
 	ha = container_of(hes, struct m0_ha, h_entrypoint_server);
 	M0_ENTRY("ha=%p hes=%p req=%p", ha, hes, req);
 	ha->h_cfg.hcf_ops.hao_entrypoint_request(ha, req, req_id);
@@ -1022,6 +1023,19 @@ M0_INTERNAL void m0_ha_mod_fini(void)
 	m0_free(ha_module);
 }
 
+M0_INTERNAL void m0_ha_broadcast(struct m0_ha *ha, struct m0_ha_msg *msg)
+{
+	struct ha_link_ctx *hlx;
+	struct m0_ha_link  *hl;
+	uint64_t            tag;
+
+	m0_tl_for(ha_links, &ha->h_links_incoming, hlx) {
+		hl = &hlx->hlx_link;
+		m0_ha_link_send(hl, msg, &tag);
+	} m0_tl_endfor;
+
+}
+
 #undef M0_TRACE_SUBSYSTEM
 
 /** @} end of ha group */
diff --git a/ha/ha.h b/ha/ha.h
index 680d26e60..e716c4a06 100644
--- a/ha/ha.h
+++ b/ha/ha.h
@@ -345,6 +345,9 @@ M0_INTERNAL void m0_ha_rpc_endpoint(struct m0_ha      *ha,
 M0_INTERNAL int  m0_ha_mod_init(void);
 M0_INTERNAL void m0_ha_mod_fini(void);
 
+
+M0_INTERNAL void m0_ha_broadcast(struct m0_ha *ha, struct m0_ha_msg *msg);
+
 /** @} end of ha group */
 #endif /* __MERO_HA_HA_H__ */
 
diff --git a/ha/halon/interface.c b/ha/halon/interface.c
index 918b68801..3126af8a7 100644
--- a/ha/halon/interface.c
+++ b/ha/halon/interface.c
@@ -98,7 +98,7 @@ struct m0_halon_interface_cfg {
 	void           (*hic_msg_received_cb)
 		(struct m0_halon_interface *hi,
 		 struct m0_ha_link         *hl,
-		 const struct m0_ha_msg    *msg,
+		 struct m0_ha_msg    *msg,
 		 uint64_t                   tag);
 	void           (*hic_msg_is_delivered_cb)
 		(struct m0_halon_interface *hi,
@@ -865,7 +865,7 @@ int m0_halon_interface_start(struct m0_halon_interface *hi,
 			     void                     (*msg_received_cb)
 				(struct m0_halon_interface *hi,
 				 struct m0_ha_link         *hl,
-				 const struct m0_ha_msg    *msg,
+				 struct m0_ha_msg    *msg,
 				 uint64_t                   tag),
 			     void                     (*msg_is_delivered_cb)
 				(struct m0_halon_interface *hi,
@@ -1133,6 +1133,30 @@ struct m0_spiel *m0_halon_interface_spiel(struct m0_halon_interface *hi)
 	return working ? spiel : NULL;
 }
 
+M0_INTERNAL struct m0 *m0_halon_interface_m0_get(struct m0_halon_interface *hi)
+{
+	return &hi->hif_internal->hii_instance;
+}
+
+M0_INTERNAL struct m0_ha *m0_halon_interface_ha(struct m0_halon_interface *hi)
+{
+	return &hi->hif_internal->hii_ha;
+}
+
+M0_INTERNAL struct m0_ha_dispatcher *m0_halon_interface_ha_dispatcher(struct m0_halon_interface *hi)
+{
+	return &hi->hif_internal->hii_dispatcher;
+}
+
+M0_INTERNAL void m0_halon_interface_nvec_broadcast(struct m0_halon_interface *hi, struct m0_ha_nvec *nvec)
+{
+	struct m0_ha      *ha = &hi->hif_internal->hii_ha;
+	struct m0_ha_msg  *msg;
+
+	msg = m0_ha_nvec_msg_alloc(nvec, 0, M0_HA_NVEC_SET);
+	m0_ha_broadcast(ha, msg);
+}
+
 #undef M0_TRACE_SUBSYSTEM
 
 /** @} end of ha group */
diff --git a/ha/halon/interface.h b/ha/halon/interface.h
index b98f43f1f..08a48b7cc 100644
--- a/ha/halon/interface.h
+++ b/ha/halon/interface.h
@@ -250,6 +250,7 @@ struct m0_ha_link;
 struct m0_ha_msg;
 struct m0_fid;
 struct m0_spiel;
+struct m0_ha_nvec;
 
 struct m0_halon_interface {
 	struct m0_halon_interface_internal *hif_internal;
@@ -361,7 +362,7 @@ int m0_halon_interface_start(struct m0_halon_interface *hi,
 			     void                     (*msg_received_cb)
 				(struct m0_halon_interface *hi,
 				 struct m0_ha_link         *hl,
-				 const struct m0_ha_msg    *msg,
+				 struct m0_ha_msg    *msg,
 				 uint64_t                   tag),
 			     void                     (*msg_is_delivered_cb)
 				(struct m0_halon_interface *hi,
@@ -485,6 +486,11 @@ struct m0_reqh *m0_halon_interface_reqh(struct m0_halon_interface *hi);
  */
 struct m0_spiel *m0_halon_interface_spiel(struct m0_halon_interface *hi);
 
+M0_INTERNAL struct m0 *m0_halon_interface_m0_get(struct m0_halon_interface *hi);
+M0_INTERNAL struct m0_ha *m0_halon_interface_ha(struct m0_halon_interface *hi);
+M0_INTERNAL struct m0_ha_dispatcher *m0_halon_interface_ha_dispatcher(struct m0_halon_interface *hi);
+M0_INTERNAL void m0_halon_interface_nvec_broadcast(struct m0_halon_interface *hi, struct m0_ha_nvec *nvec);
+
 /** @} end of ha group */
 #endif /* __MERO_HA_HALON_INTERFACE_H__ */
 
diff --git a/ha/note.c b/ha/note.c
index 20ad7613e..ae0e76338 100644
--- a/ha/note.c
+++ b/ha/note.c
@@ -191,7 +191,7 @@ M0_INTERNAL void m0_ha_msg_accept(const struct m0_ha_msg *msg,
 	nvec = (struct m0_ha_nvec){
 		.nv_nr   = msg->hm_data.u.hed_nvec.hmnv_nr,
 	};
-	M0_LOG(M0_DEBUG, "nvec nv_nr=%"PRIu32" hmvn_type=%s", nvec.nv_nr,
+	M0_LOG(M0_ALWAYS, "nvec nv_nr=%"PRIu32" hmvn_type=%s", nvec.nv_nr,
 	       msg->hm_data.u.hed_nvec.hmnv_type == M0_HA_NVEC_SET ?  "SET" :
 	       msg->hm_data.u.hed_nvec.hmnv_type == M0_HA_NVEC_GET ?  "GET" :
 								    "UNKNOWN!");
@@ -199,7 +199,7 @@ M0_INTERNAL void m0_ha_msg_accept(const struct m0_ha_msg *msg,
 	M0_ASSERT(nvec.nv_note != NULL);
 	for (i = 0; i < nvec.nv_nr; ++i) {
 		nvec.nv_note[i] = msg->hm_data.u.hed_nvec.hmnv_arr.hmna_arr[i];
-		M0_LOG(M0_DEBUG, "nv_note[%d]=(no_id="FID_F" "
+		M0_LOG(M0_ALWAYS, "nv_note[%d]=(no_id="FID_F" "
 		       "no_state=%"PRIu32")", i, FID_P(&nvec.nv_note[i].no_id),
 		       nvec.nv_note[i].no_state);
 	}
@@ -239,20 +239,11 @@ M0_INTERNAL void m0_ha_msg_accept(const struct m0_ha_msg *msg,
 	m0_free(nvec.nv_note);
 }
 
-M0_INTERNAL uint64_t m0_ha_msg_nvec_send(const struct m0_ha_nvec *nvec,
-					 uint64_t                 id_of_get,
-					 int                      direction,
-					 struct m0_ha_link       *hl)
+M0_INTERNAL struct m0_ha_msg *m0_ha_nvec_msg_alloc(const struct m0_ha_nvec *nvec,
+						   uint64_t id_of_get,int direction)
 {
 	struct m0_ha_msg *msg;
-	uint64_t          tag;
 
-	if (hl == NULL)
-		hl = m0_get()->i_ha_link;
-	if (hl == NULL) {
-		M0_LOG(M0_WARN, "hl == NULL");
-		return 0;
-	}
 	M0_ALLOC_PTR(msg);
 	M0_ASSERT(msg != NULL);
 	*msg = (struct m0_ha_msg){
@@ -270,6 +261,26 @@ M0_INTERNAL uint64_t m0_ha_msg_nvec_send(const struct m0_ha_nvec *nvec,
 		  ARRAY_SIZE(msg->hm_data.u.hed_nvec.hmnv_arr.hmna_arr));
 	memcpy(msg->hm_data.u.hed_nvec.hmnv_arr.hmna_arr, nvec->nv_note,
 	       nvec->nv_nr * sizeof(nvec->nv_note[0]));
+
+	return msg;
+}
+
+M0_INTERNAL uint64_t m0_ha_msg_nvec_send(const struct m0_ha_nvec *nvec,
+					 uint64_t                 id_of_get,
+					 int                      direction,
+					 struct m0_ha_link       *hl)
+{
+	struct m0_ha_msg *msg;
+	uint64_t          tag;
+
+	if (hl == NULL)
+		hl = m0_get()->i_ha_link;
+	if (hl == NULL) {
+		M0_LOG(M0_WARN, "hl == NULL");
+		return 0;
+	}
+
+	msg = m0_ha_nvec_msg_alloc(nvec, id_of_get, direction);
 	m0_ha_link_send(hl, msg, &tag);
 	m0_free(msg);
 
diff --git a/ha/note.h b/ha/note.h
index d5a4ec905..8e501831b 100644
--- a/ha/note.h
+++ b/ha/note.h
@@ -346,6 +346,8 @@ M0_INTERNAL void m0_ha_note_handler_signal(struct m0_ha_note_handler *hnh,
                                            uint64_t                   id);
 
 M0_INTERNAL const char *m0_ha_state2str(enum m0_ha_obj_state state);
+M0_INTERNAL struct m0_ha_msg *m0_ha_nvec_msg_alloc(const struct m0_ha_nvec *nvec,
+						   uint64_t id_of_get,int direction);
 
 /** @} end of ha-note group */
 #endif /* __MERO___HA_NOTE_H__ */
