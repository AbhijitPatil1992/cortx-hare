#!/usr/bin/env bash
set -eu -o pipefail
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '
#set -x

PROG=${0##*/}
DEFAULT_TIMEOUT=5

export PATH="/opt/seagate/cortx/hare/bin:$PATH"

# XXX Extract this function into some library once it is copied 3 times.
# See https://wiki.c2.com/?ThreeStrikesAndYouRefactor .
log() {
    logger --stderr --tag "check-$PROG" "$@"
}

# XXX ditto
die() {
    log "$@"
    exit 1
}

usage() {
    cat <<EOF
Usage: $PROG [-h | --help] [<timeout>]

Check that cluster leader can be fetched with 'consul' command.
Uses timeout to wait before termination in case internal command freezes
for any reason. Returns error if timeout was triggered.
The script expects that consul writes errors to stderr and data to stdout.

Positional arguments:
  timeout   Natural number of seconds to wait before kill leader request.
            Default value: 5 sec

Options:
  -h, --help   Show this help and exit.
EOF
}

case ${1:-none} in
    -h|--help) usage; exit;;
    0) die 'Zero timeout is not allowed';;
esac

timeout_sec=${1:-$DEFAULT_TIMEOUT}
cli_out=$(mktemp)
api_out=$(mktemp)

exec 5>&2
exec 2> >(logger --stderr --tag $PROG >&2)
timeout --signal SIGKILL $timeout_sec consul kv get leader > $cli_out &
timeout --signal SIGKILL $timeout_sec curl --silent --max-time $timeout_sec \
        http://127.0.0.1:8500/v1/status/leader > $api_out &
exec 2>&5

# XXX Exit statuses of `timeout` jobs are lost.
# See http://gitlab.mero.colo.seagate.com/mero/hare/issues/337
wait

[[ -s $cli_out ]] && hare_leader_p=true || hare_leader_p=false
[[ -s $api_out ]] && consul_leader_p=true || consul_leader_p=false

$hare_leader_p || log 'Hare leader not elected'
$consul_leader_p || log 'Consul (Raft) leader not elected'

$hare_leader_p && $consul_leader_p
