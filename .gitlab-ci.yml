# Globals ----------------------------------------------------------------- {{{1
#

variables:
  GIT_DEPTH: 1  # clone only the current commit
  GIT_STRATEGY: clone  # make a fresh `git clone` of the repo for every new CI job
  GIT_SUBMODULE_STRATEGY: normal  # init and check out submodules
  CENTOS_RELEASE: '7.5'
  DOCKER_REGISTRY: registry.gitlab.mero.colo.seagate.com
  M0_VG_NO_SYMLINKS: "true"
  WORKSPACE_NAME: "${CI_PROJECT_NAME}${CI_PIPELINE_ID}"
  WORKSPACE_DIR:  "/home/gitlab-runner/workspaces/${CI_PROJECT_NAME}${CI_PIPELINE_ID}"

stages:
  - build
  - test
  - cleanup

before_script:
  - date -u -Isec
  - git log -1 --pretty=fuller
  - printenv

after_script:
  - date -u -Isec


# Build ------------------------------------------------------------------- {{{1
#

build:
  stage: build
  tags: [ m0vg ]
  except: [ tags ]
  script:
    # can't be defined in the 'variables:' section because it supports only
    # single level of variable expansion, e.g. A=$VAR; B=$A won't work for B
    - export JOB_NAME="${WORKSPACE_NAME}-${CI_JOB_NAME}"

    - sudo rm -rf ${WORKSPACE_DIR}
    - mkdir -p ${WORKSPACE_DIR}
    - cp -a ../${CI_PROJECT_NAME} ${WORKSPACE_DIR}
    - cd ${WORKSPACE_DIR}

    # make sure that build image is up to date
    - docker pull $DOCKER_REGISTRY/mero/mero:$CENTOS_RELEASE

    # Get fresh Mero copy.
    - git clone --recursive --depth 1 --shallow-submodules http://gitlab.mero.colo.seagate.com/mero/mero.git

    - |
      cat >mero/_build-m0.sh <<'EOF'
      set -eu -o pipefail

      KERNEL=$(yum list installed kernel | tail -n1 | awk '{ print $2 }')

      ./autogen.sh
      ./configure --with-linux=/lib/modules/${KERNEL}.x86_64/build
      make -j10
      EOF

    # Build Mero.
    - time docker run --rm --name ${JOB_NAME}
                      -v ~+:/data -w /data/mero
                  $DOCKER_REGISTRY/mero/mero:$CENTOS_RELEASE
                      bash -x _build-m0.sh

    - |
      cat >hare/_build-hax.sh <<'EOF'
      set -eu -o pipefail

      yum install -y python36 python36-devel python36-pip gettext
      ./install
      EOF

    # Build hax's C extension.
    - time docker run --rm --name ${JOB_NAME}
                      -v ~+:/data -w /data/hare
                  $DOCKER_REGISTRY/mero/mero:$CENTOS_RELEASE
                      bash -x _build-hax.sh

    # containers run commands as 'root' user, seize ownership back
    - sudo chown -R $(id -u):$(id -g) .

test-cfgen:
  stage: test
  tags: [ m0vg ]
  except: [ tags ]

  script:
    # Cannot be defined in the 'variables:' section because it supports only
    # single level of variable expansion, e.g. A=$VAR; B=$A won't work for B.
    - export JOB_NAME="${WORKSPACE_NAME}-${CI_JOB_NAME}"

    - cd ${WORKSPACE_DIR}

    - |
      cat >hare/_test-cfgen.sh <<'EOF'
      set -eu -o pipefail

      yum install -y python36 python36-pip python36-PyYAML
      pip3 install flake8 mypy

      download=https://github.com/dhall-lang/dhall-haskell/releases/download
      for f in $download/1.26.0/dhall-1.26.0-x86_64-linux.tar.bz2 \
               $download/1.26.0/dhall-json-1.4.1-x86_64-linux.tar.bz2; do
          curl -LO $f
          tar -C /usr/local/ -xf ${f##*/}
      done

      make -C cfgen
      EOF

    - time docker run --rm --name ${JOB_NAME}
                      -v ~+:/data -w /data/hare
                  $DOCKER_REGISTRY/mero/mero:$CENTOS_RELEASE
                      bash -x _test-cfgen.sh

test-bootstrap:
  stage: test
  tags: [ m0vg ]
  except: [ tags ]

  variables:
    M0VG: ./m0vg-single/scripts/m0vg

  before_script:
    # can't be defined in the 'variables:' section because it supports only
    # sinle level of variable expansion, e.g. A=$VAR; B=$A won't work for B
    - export JOB_NAME="${WORKSPACE_NAME}-${CI_JOB_NAME}-single"

    - cd ${WORKSPACE_DIR}

    - date -u -Isec
    - printenv

    - |
      test -d m0vg-single ||
      git clone --recursive --depth 1 --shallow-submodules \
                http://gitlab.mero.colo.seagate.com/mero/mero.git \
                m0vg-single

    # Prepare m0vg singlenode.
    - |
      $M0VG env add <<EOF
      M0_VM_BOX=centos75/dev-halon
      M0_VM_BOX_URL='http://ci-storage.mero.colo.seagate.com/vagrant/centos75/dev'
      M0_VM_CMU_MEM_MB=4096
      M0_VM_NAME_PREFIX=${JOB_NAME}
      M0_VM_HOSTNAME_PREFIX=${JOB_NAME}
      EOF
    - time $M0VG up --no-provision cmu
    - time $M0VG reload --no-provision cmu

  script:
    - |
      cat >hare/_test-bootstrap.sh <<'EOF'
      set -eu -o pipefail

      sudo yum install -y python36 python36-devel python36-PyYAML python36-pip
      sudo pip3 install ply

      download=https://github.com/dhall-lang/dhall-haskell/releases/download
      for f in $download/1.26.0/dhall-1.26.0-x86_64-linux.tar.bz2 \
               $download/1.26.0/dhall-json-1.4.1-x86_64-linux.tar.bz2; do
          curl -LO $f
          sudo tar -C /usr/local/ -xf ${f##*/}
      done

      curl -LO https://releases.hashicorp.com/consul/1.6.1/consul_1.6.1_linux_amd64.zip
      unzip -x consul_1.6.1_linux_amd64.zip
      sudo mv consul /usr/local/bin/

      cd /data/mero
      sudo ./utils/m0setup  # create loop devices

      cd /data/hare/
      bash -x ./install

      # XXX `systemctl start hax` command, called by `bootstrap-node` script,
      # will fail unless `mero-kernel` systemd service is installed.
      sudo /data/mero/scripts/install-mero-service

      bash -x ./bootstrap cfgen/_misc/singlenode.yaml
      EOF
    - time $M0VG run 'bash -x /data/hare/_test-bootstrap.sh'

  after_script:
    - cd ${WORKSPACE_DIR}

    # Clean up.  This ensures that VMs are destroyed in case of a manual
    # job restart, when global 'cleanup' stage is not performed.
    - $M0VG destroy -f || true


# Cleanup ----------------------------------------------------------------- {{{1
#

cleanup:
  stage: cleanup
  tags: [ m0vg ]
  except: [ tags ]
  when: always
  dependencies: []  # empty deps list prevents unneeded artifacts downloading

  variables:
    # If a branch is updated while CI tests for the older commit are still
    # being run, the checkout phase of 'cleanup' job will fail (thus cleanup
    # script will not run) unless GIT_DEPTH is deep enough to include the older
    # commit. Cloning 30 latest commits seems to be good enough - it's quite
    # rare for people to push more than 30 new commits in one go.
    GIT_DEPTH: 30

  script:
    - cd ${WORKSPACE_DIR}
    - ./m0vg-single/scripts/m0vg destroy -f || true

# vim: foldmethod=marker shiftwidth=2 tabstop=2 expandtab
