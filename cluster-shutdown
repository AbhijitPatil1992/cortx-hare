#!/usr/bin/env python3

import os
import sys
from socket import gethostname
from typing import Dict, List, NamedTuple

from consul import Consul

other_p = ['hax', 'consul-agent']
mero_p = ['ios', 'confd']
Process = NamedTuple('Process', [('node', str), ('name', str), ('fidk', int),
                                 ('status', str)])


def processfid2str(fidk: int) -> str:
    return '{:#x}:{:#x}'.format(ord('r') << 56 | 1, fidk)


def get_kv(c: Consul, key: str) -> str:
    kv: Dict[str, bytes] = c.kv.get(key)[1]
    return kv['Value'].decode() if kv is not None else ''


def processes_get(c: Consul) -> List[Process]:
    processes: List[Process] = []
    c = Consul()
    for node in c.catalog.nodes()[1]:
        svcs_status = c.health.node(node['Node'])
        processes.extend(
            Process(node=node['Node'],
                    name=svc['ServiceName'],
                    fidk=svc['ServiceID'],
                    status=svc['Status']) for svc in svcs_status[1]
            if svc['ServiceName'])

        processes.append(
            Process(node=node['Node'],
                    name='consul-agent',
                    fidk=0,
                    status=consul_status(node['Node'])))
    return processes


def is_localhost(hostname: str) -> bool:
    name = gethostname()
    return hostname in ('localhost', '127.0.0.1', name, f'{name}.local')


def consul_status(host: str) -> str:
    cmd = '{}sudo systemctl is-active --quiet consul-agent'.format(
        '' if is_localhost(host) else f'ssh {host} ')
    return 'passing' if os.system(cmd) == 0 else 'offline'


def exec(cmd) -> str:
    return 'done' if os.system(cmd) == 0 else 'failed'


def process_stop(h: str, ps: Process):
    if ps.status == 'passing':
        sname = (ps.name if ps.name in other_p else
                 f'm0d@{processfid2str(int(ps.fidk))}')
        cmd = '{}sudo systemctl stop --force {}'.format(
            '' if is_localhost(h) else f'ssh {h} ', sname)
        print(f'Stopping {ps.name} ({sname}) on {h}...{exec(cmd)}')


def stop_watcher(host: str):
    cmd = '{}sudo pkill -9 consul'.format(
        '' if is_localhost(host) else f'ssh {host} ')
    print(f'Stopping consul watcher on {host}...{exec(cmd)}')


def node_stop(node: str, ps: List):
    def processbyname(ps: List[Process], pname: str) -> List[Process]:
        return [p for p in ps if p.name == pname]

    for t in mero_p + other_p:
        for p in processbyname(ps, t):
            if p.node == node:
                process_stop(node, p)


def main():
    if consul_status(gethostname()) != 'passing':
        print('Cluster is not running.')
        return -1

    c = Consul()
    processes = processes_get(c)
    leader = get_kv(c, 'leader')

    for node in set(p.node for p in processes):
        if node != leader:
            node_stop(node, processes)

    node_stop(leader, processes)
    stop_watcher(leader)
    return 0


if __name__ == '__main__':
    sys.exit(main())
