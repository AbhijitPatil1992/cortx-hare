#!/usr/bin/env bash
set -eu -o pipefail
# set -x
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '

PROG=${0##*/}

usage() {
    cat <<EOF
Usage: $PROG [--mkfs|--mkfs-only] { -p|--phase 1|2|3 }

Bootstraps single node after local consul agent is started.

The required parameter is one of the following:

  --phase 1 - start Mero confd servers
  --phase 2 - start Mero IO servers
  --phase 3 - start S3 servers

Options:
  --mkfs-only   Do m0mkfs only (CAUTION: wipes Mero data).
  --mkfs        Do m0mkfs (CAUTION: wipes Mero data) and start Mero servers.
  --m0d         Skip m0mkfs, start Mero servers.
  -h, --help    Show this help and exit.
EOF
}

die() {
    echo "[$HOSTNAME] $PROG: $*" >&2
    exit 1
}

do_mkfs=
phase=-

TEMP=$(getopt --options hp: \
              --longoptions help,mkfs,mkfs-only,m0d,phase: \
              --name "$PROG" -- "$@" || true)

(($? == 0)) || { usage >&2; exit 1; }

eval set -- "$TEMP"
while true; do
    case "$1" in
        -h|--help)           usage; exit ;;
        --mkfs)              do_mkfs=mkfs; shift ;;
        --mkfs-only)         do_mkfs=mkfs-only; shift ;;
        -p|--phase)          phase=$2; shift 2 ;;
        --)                  shift; break ;;
        *)                   echo 'getopt: internal error...'; exit 1 ;;
    esac
done

[[ $phase =~ ^phase[1-3]$ ]] ||
    die "Invalid value of 'phase' argument: $phase"

if [[ $do_mkfs ]] && [[ $phase == 'phase3' ]]; then
    die '--mkfs conflicts with --phase3'
fi

# If mero-kernel.service is not installed, the script will fail
# anyway, with or without this check.  The purpose of the check is to
# provide proper error message.
#
# Without this check `sudo systemctl start hare-hax` fails with "Failed to
# start hax.service: Unit not found" error message.  That error
# message is misleading, because hax.service _is_ installed, it is
# one of its dependencies - mero-kernel.service - which isn't.
out_systemctl=$(systemctl list-unit-files mero-kernel.service)
if ! grep -qE '^mero-kernel\.service\>' <<< "$out_systemctl"; then
    cat >&2 <<EOF
**********************************************************************
SNAP!  You've stumbled on an insufficiently tested branch of code.

bootstrap-node script believes that 'mero-kernel' is not installed.
Oftentimes this belief is contradicted by reality.

EES developers need your help.

Please add a comment to
http://gitlab.mero.colo.seagate.com/mero/hare/issues/242
with the following output:

----------BEGIN OUTPUT----------
HOSTNAME=$HOSTNAME

\`systemctl list-unit-files mero-kernel.service\`:
$out_systemctl
----------END OUTPUT----------

Thanks!  You're such a wonderful person. [But you got problems.]
**********************************************************************
EOF
    die "'mero-kernel' systemd service is not installed"
fi

. update-consul-conf --dry-run  # import CONFD_IDs, IOS_IDs, id2fid()

if [[ $do_mkfs ]] && [[ ! -e /etc/sysconfig/mero-kernel ]]; then
    # Auto-start of `mero-kernel` systemd unit will cause kernel panic
    # unless `MERO_NODE_UUID` configuration option is provided.
    echo "MERO_NODE_UUID='$(uuidgen --time)'" |
        sudo tee /etc/sysconfig/mero-kernel >/dev/null
fi

wait_active() {
    local svc=$1
    local timeout=$2  # seconds
    local count=0

    while ! systemctl --quiet is-active $svc; do
        (($count < $timeout)) || die "Unable to start $svc service"
        sleep 1
        ((++count))
    done
}

# m0d sends 'active' to systemd before the startup is actually finished,
# so we need to parse the output of m0d this way to make sure it is
# really started.
wait_m0d_started() {
    local fid=$1
    local timeout=$2  # seconds
    local count=0

    while ! sudo systemctl status "m0d@$fid" | grep -q ': Started$'; do
        (($count < $timeout)) || die "Unable to start m0d@$fid service"
        sleep 1
        ((++count))
    done
}

if [[ -n $CONFD_IDs || -n $IOS_IDs ]]; then
    sudo mkdir -p /var/mero/hax
    sudo systemctl start hare-hax
    wait_active hare-hax 5
fi

if [[ -n $CONFD_IDs && $phase == phase1 ]]; then
    [[ -f /var/lib/hare/confd.xc ]] ||
        die 'Cannot bootstrap server node without /var/lib/hare/confd.xc file'
    sudo mkdir -p /etc/mero
    sudo cp /var/lib/hare/confd.xc /etc/mero/
fi

case $phase in
    phase1)
       proc='m0d@'
       IDs=$CONFD_IDs
       ;;
    phase2)
       proc='m0d@'
       IDs=$IOS_IDs
       ;;
    phase3)
       proc='s3server@'
       IDs=$S3_IDs
       ;;
    *)
       die 'Impossible happened'
       ;;
esac

for id in $IDs; do
    fid=$(id2fid $id)
    if [[ $do_mkfs ]]; then
        sudo systemctl start mero-mkfs@$fid
        touch /tmp/mero-mkfs-pass-$fid
        # Give time for service check to reset m0mkfs' HA state
        # (see utils/check-service also).
        while [[ -f /tmp/mero-mkfs-pass-$fid ||
                 -f /tmp/mero-mkfs-fail-$fid ]] ||
              ! consul kv get processes/$fid | grep -q 'STOPPED'; do
            sleep 1
        done
        sleep 1
    fi

    if [[ $do_mkfs != 'mkfs-only' ]]; then
        sudo systemctl start $proc$fid
        if [[ $proc == 'm0d@' ]]; then
            wait_m0d_started $fid 120
        fi
    fi
done
