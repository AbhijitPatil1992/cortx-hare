#!/usr/bin/env python3

import json
from socket import gethostname
from typing import Dict, List, NamedTuple, Set

from consul import Consul

Process = NamedTuple('Process', [('name', str), ('fidk', int), ('ep', str)])


def processfid2str(fidk: int) -> str:
    return '{:#x}:{:#x}'.format(ord('r') << 56 | 1, fidk)


def get_kv(c: Consul, key: str) -> str:
    kv: Dict[str, bytes] = c.kv.get(key)[1]
    return kv['Value'].decode() if kv is not None else ''


def leader_tag(c: Consul, host: str) -> str:
    return ' (RC)' if get_kv(c, 'leader') == host else ''


def profile(c: Consul) -> str:
    return get_kv(c, 'profile')


def sns_pools(c: Consul) -> List[str]:
    return get_kv(c, 'profile/pools').split(' ')


def hosts(c: Consul) -> Set[str]:
    data = c.kv.get('node', recurse=True)[1]
    host_names = {(x['Key'].split('/'))[1] for x in data}

    return host_names


def svc2name(types: str) -> str:
    if 'ios' in types.split(' '):
        return 'ioservice'
    elif 'ha' in types.split(' '):
        return 'hax'
    elif 'confd' in types.split(' '):
        return 'confd'
    else:
        return 'c0_client'


def processes(c: Consul, host: str) -> List:
    data = c.kv.get(f'node/{host}/service', recurse=True)[1]
    fidk_list = list({(x['Key'].split('/'))[3] for x in data})
    fidk_list.sort(key=int, reverse=False)

    return [
        Process(name=svc2name(get_kv(c, f'node/{host}/service/{x}/types')),
                fidk=int(x),
                ep=get_kv(c, f'node/{host}/service/{x}/ep')) for x in fidk_list
    ]


def is_localhost(hostname: str) -> bool:
    name = gethostname()
    return hostname in ('localhost', '127.0.0.1', name, f'{name}.local')


def process_status(c: Consul, host: str, ps: Process) -> str:
    attr_str = get_kv(c, f'processes/{processfid2str(ps.fidk)}')
    if attr_str != '':
        attr = json.loads(attr_str)
        ret: str = attr['state'][len('M0_CONF_HA_PROCESS_'):]
        return ret.lower()
    return 'unknown'


def main():
    c = Consul()
    print(f'Profile   : {profile(c)}')
    print('Data Pools:')
    for x in sns_pools(c):
        print(f'    {x}')
    print('Services  :')
    for h in hosts(c):
        print(f'    {h} {leader_tag(c, h)}')
        for p in processes(c, h):
            print(f'    [{process_status(c, h, p):<10}] {p.name:<20}\
 {processfid2str(p.fidk):<30} {p.ep:<30}')


if __name__ == '__main__':
    main()
