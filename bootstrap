#!/usr/bin/env bash
set -eu -o pipefail
# set -x
export PS4='+ [${BASH_SOURCE[0]##*/}:${LINENO}${FUNCNAME[0]:+:${FUNCNAME[0]}}] '

# Helper script to bootstrap the cluster.

PROG=${0##*/}
SRC_DIR="$(dirname $(readlink -f $0))"
M0_SRC_DIR=${M0_SRC_DIR:-${SRC_DIR%/*}/mero}

usage() {
    cat <<EOF
Usage: $PROG [--mkfs] cluster-description-file.yaml

Bootstrap cluster described by the description file.

Options:
  --mkfs                    Do m0mkfs (WARNING: wipes Mero data).
  -h, --help                Show this help and exit.
EOF
}

say() {
    echo -n "$(date '+%F %T'): $*"
}

get_server_nodes() {
    jq -r '.servers[] | "\(.hostname) \(.ipaddr)"' $cfgen_out/consul-agents.json
}

get_client_nodes() {
    jq -r '.clients[] | "\(.hostname) \(.ipaddr)"' $cfgen_out/consul-agents.json
}

get_all_nodes() {
    jq -r '(.servers + .clients)[] | "\(.hostname) \(.ipaddr)"' \
        $cfgen_out/consul-agents.json
}

get_session() {
    consul kv get -detailed leader | awk '/Session/ {print $2}'
}

get_session_checks_nr() {
    local sid=$1
    curl -sX GET http://localhost:8500/v1/session/info/$sid |
        jq -r '.[].Checks|length'
}

wait_rc_leader() {
    local count=1
    while [[ $(get_session) == '-' ]]; do
        if (( $count > 5 )); then
            consul kv put leader elect$RANDOM > /dev/null
            count=1
        fi
        sleep 1
        echo -n '.'
        (( count++ ))
    done
}

wait4() {
    for pid in $*; do
        wait $pid
    done
}

get_ready_agents() {
    consul members | sed 1d | awk '{print $1}'
}

get_ready_agents_nr() {
    consul members | sed 1d | wc -l
}

TEMP=$(getopt --options h \
              --longoptions help,mkfs \
              --name "$PROG" -- "$@" || true)

(($? == 0)) || { usage >&2; exit 1; }

eval set -- "$TEMP"
while true; do
    case "$1" in
        -h|--help)           usage; exit ;;
        --mkfs)              opt_mkfs=--mkfs; shift ;;
        --)                  shift; break ;;
        *)                   break ;;
    esac
done

(($# == 1)) || {
    usage >&2
    exit 1
}

cluster_descr=$1

say 'Generating cluster configuration... '
cfgen_out=/tmp

cd $SRC_DIR
cfgen/cfgen -D cfgen/dhall/ -o $cfgen_out < $cluster_descr

sudo mkdir -p /etc/mero
dhall text < $cfgen_out/confd.dhall |
    $M0_SRC_DIR/utils/m0confgen > $cfgen_out/confd.xc

# Get my IP address (the one that the other agents will join to).
read _ join_ip <<< $(get_server_nodes | grep -w $HOSTNAME)

[[ $join_ip ]] || {
    echo 'Bootstrap should be run from the server node only' >&2
    exit 1
}
echo 'Ok.'

say 'Starting Consul server agent on this node... '
# $join_ip is our bind_ip address
$SRC_DIR/mk-consul-env --mode server --bind $join_ip \
                       --extra-options '-ui -bootstrap-expect 1'

sudo systemctl start consul-agent

# Give Consul some time for its internal bootstrap and leader
# election. (Until then the KV Store won't be accessible.)
sleep 3
echo 'Ok.'

say 'Importing configuration into the KV Store... '
jq '[.[] | {key, value: (.value | @base64)}]' < $cfgen_out/consul-kv.json |
    consul kv import - > /dev/null
echo 'Ok.'

say 'Starting Consul agents on remaining cluster nodes...'
pids=()
while read node bind_ip; do
    ssh $node "$SRC_DIR/mk-consul-env --mode server --bind $bind_ip \
                                      --join $join_ip &&
               sudo systemctl start consul-agent" &
    pids+=($!)
done < <(get_server_nodes | grep -vw $HOSTNAME || true)

while read node bind_ip; do
    ssh $node "$SRC_DIR/mk-consul-env --mode client --bind $bind_ip \
                                      --join $join_ip &&
                   sudo systemctl start consul-agent" &
    pids+=($!)
done < <(get_client_nodes)
wait4 ${pids[@]-}
agents_nr=$(( ${#pids[@]} + 1 ))

# Waiting for the agents to get ready...
count=1
while (( $(get_ready_agents_nr) != $agents_nr )); do
    if (( $count > 5 )); then
        echo 'Some agent(s) failed to start in a due time:' >&2
        diff <(get_ready_agents | sort) \
             <(get_all_nodes | awk '{print $1}' | sort) | sed 1d >&2
        exit 1
    fi
    echo -n '.'
    sleep 1
    (( count++ ))
done
echo ' Ok.'

say 'Update Consul agents configs from the KV Store... '
$SRC_DIR/update-consul-conf &
pids=($!)
while read node _; do
    ssh $node "$SRC_DIR/update-consul-conf" &
    pids+=($!)
done < <(get_all_nodes | grep -vw $HOSTNAME || true)
wait4 ${pids[@]}
echo 'Ok.'

say 'Waiting for the RC Leader to be elected...'
wait_rc_leader
sid=$(get_session)
# There is always the serfHealth check in the session. But
# if it is the only one - we should destroy the current session
# (and wait for re-election to happen) to make sure that the new
# session will be bound to the Mero services checks also.
while (( $(get_session_checks_nr $sid) == 1 )); do
    curl -sX PUT http://localhost:8500/v1/session/destroy/$sid &>/dev/null
    wait_rc_leader
    sid=$(get_session)
done
echo ' Ok.'

# Start Mero in two phases: 1st confd-s, then ios-es.
say 'Starting Mero (phase1)... '
$SRC_DIR/bootstrap-node ${opt_mkfs:-} --phase 1 &
pids=($!)

while read node _; do
    scp -q $cfgen_out/confd.xc $node:/tmp/
    ssh $node $SRC_DIR/bootstrap-node ${opt_mkfs:-} --phase 1 &
    pids+=($!)
# Note: confd-s are running on server nodes only.
done < <(get_server_nodes | grep -vw $HOSTNAME || true)
wait4 ${pids[@]}
echo 'Ok.'

# Now the 2nd phase (ios-es).
say 'Starting Mero (phase2)... '
$SRC_DIR/bootstrap-node ${opt_mkfs:-} --phase 2 &
pids=($!)

while read node _; do
    ssh $node $SRC_DIR/bootstrap-node ${opt_mkfs:-} --phase 2 &
    pids+=($!)
done < <(get_all_nodes | grep -vw $HOSTNAME || true)
wait4 ${pids[@]}
echo 'Ok.'

say 'Checking the health of the services... '
check_service() {
    local svc=$1
    curl -s http://127.0.0.1:8500/v1/health/service/$svc |
        jq -r '.[] | "\(.Node.Node) \([.Checks[].Status]|unique)"' |
        fgrep -v '["passing"]' || true
}
count=1
for svc in confd ios; do
    svc_not_ready=$(check_service $svc)
    while [[ $svc_not_ready ]]; do
        if (( $count > 5 )); then
            echo $svc_not_ready >&2
            echo "Check '$svc' service on the node(s) listed above." >&2
            exit 1
        fi
        (( count++ ))
        sleep 1
        svc_not_ready=$(check_service $svc)
    done
done
echo 'Ok.'
